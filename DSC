class DSConv2d(nn.Module):
    def __init__(self, in_channels, out_channels, kernel_size=3, stride=1, padding=1):
        super(DSConv2d, self).__init__()
        # 深度卷积层
        self.depthwise_conv = nn.Conv2d(in_channels, in_channels, kernel_size=kernel_size, stride=stride, padding=padding, groups=in_channels)
        # 逐点卷积层
        self.pointwise_conv = nn.Conv2d(in_channels, out_channels, kernel_size=1)
        # Batch Normalization
        self.bn = nn.BatchNorm2d(out_channels)
        # ReLU 激活函数
        self.relu = nn.ReLU()

    def forward(self, x):
        # 深度卷积
        x = self.depthwise_conv(x)
        # 逐点卷积
        x = self.pointwise_conv(x)
        # Batch Normalization
        x = self.bn(x)
        # ReLU 激活函数
        x = self.relu(x)
        return x


class DSC(nn.Module):
    def __init__(self, in_channels, out_channels):
        super(DSC, self).__init__()
        self.block = nn.Sequential(
            DSConv2d(in_channels, out_channels, kernel_size=3, padding=1, stride=1),
            DSConv2d(out_channels, out_channels, kernel_size=3, padding=1, stride=1)
        )
    
    def forward(self, x):
        return self.block(x)
